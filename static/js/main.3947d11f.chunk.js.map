{"version":3,"sources":["data/rates.js","App.js","reportWebVitals.js","index.js"],"names":["Promise","resolve","amount","base","date","rates","AUD","BGN","BRL","CAD","CHF","CNY","CZK","DKK","GBP","HKD","HRK","HUF","IDR","ILS","INR","ISK","JPY","KRW","MXN","MYR","NOK","NZD","PHP","PLN","RON","RUB","SEK","SGD","THB","TRY","USD","ZAR","Dinero","globalExchangeRatesApi","currency","endpoint","Rates","CurrencySelector","title","onChange","map","rate","index","App","useState","setRates","originCurrency","setoriginCurrency","targetCurrency","settargetCurrency","originalAmount","setoriginalAmount","finalAmount","setfinalAmount","useEffect","data","then","value","ratesArray","Object","keys","convert","a","parseInt","result","toFormat","className","e","target","type","placeholder","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2NAAeA,UAAQC,QAAQ,CAC7BC,OAAQ,EACRC,KAAM,MACNC,KAAM,aACNC,MAAO,CACLC,IAAK,OACLC,IAAK,OACLC,IAAK,OACLC,IAAK,OACLC,IAAK,OACLC,IAAK,OACLC,IAAK,OACLC,IAAK,OACLC,IAAK,OACLC,IAAK,OACLC,IAAK,MACLC,IAAK,MACLC,IAAK,MACLC,IAAK,OACLC,IAAK,MACLC,IAAK,IACLC,IAAK,OACLC,IAAK,QACLC,IAAK,MACLC,IAAK,OACLC,IAAK,OACLC,IAAK,MACLC,IAAK,OACLC,IAAK,OACLC,IAAK,OACLC,IAAK,MACLC,IAAK,OACLC,IAAK,OACLC,IAAK,OACLC,IAAK,QACLC,IAAK,OACLC,IAAK,W,OC9BTC,IAAOC,uBAAyB,CAC9BC,SAAU,MACVC,SAAUC,GAGZ,IAAMC,EAAmB,SAAC,GAAgC,IAA9BtC,EAA6B,EAA7BA,MAAOuC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxC,OACE,gCACE,4BAAID,IACJ,wBAAQC,SAAUA,EAAlB,SACGxC,EAAMyC,KAAI,SAACC,EAAMC,GAAP,OACT,mCAAqBD,EAArB,MAAaC,YAiERC,MA1Df,WACE,MAA0BC,mBAAS,IAAnC,mBAAO7C,EAAP,KAAc8C,EAAd,KACA,EAA4CD,mBAAS,IAArD,mBAAOE,EAAP,KAAuBC,EAAvB,KACA,EAA4CH,mBAAS,IAArD,mBAAOI,EAAP,KAAuBC,EAAvB,KACA,EAA4CL,mBAAS,IAArD,mBAAOM,EAAP,KAAuBC,EAAvB,KACA,EAAsCP,qBAAtC,mBAAOQ,EAAP,KAAoBC,EAApB,KAEAC,qBAAU,WACR,IAAIC,EACJnB,EAAMoB,MAAK,SAACC,GACVF,EAAOE,EACP,IAAIC,EAAaC,OAAOC,KAAKL,EAAKxD,OAClC8C,EAASa,QAEV,IAEH,IAAMG,EAAO,uCAAG,8BAAAC,EAAA,6DACVlE,EAASoC,YAAO,CAClBpC,OAAmC,IAA3BmE,SAASb,GACjBhB,SAAUY,IAHE,SAKKlD,EAAOiE,QAAQb,GALpB,OAKVgB,EALU,OAMdX,EAAeW,EAAOC,YANR,2CAAH,qDASb,OACE,qBAAKC,UAAU,YAAf,SACE,sBAAKA,UAAU,OAAf,UACE,0DACA,sBAAKA,UAAU,iBAAf,UACE,cAAC,EAAD,CACE3B,SAAU,SAAC4B,GAAD,OAAOpB,EAAkBoB,EAAEC,OAAOX,QAC5CnB,MAAK,kBAAaQ,GAClB/C,MAAOA,IAET,cAAC,EAAD,CACEwC,SAAU,SAAC4B,GAAD,OAAOlB,EAAkBkB,EAAEC,OAAOX,QAC5CnB,MAAK,mBAAcU,GACnBjD,MAAOA,OAGX,uBACEwC,SAAU,SAAC4B,GAAD,OAAOhB,EAAkBgB,EAAEC,OAAOX,QAC5CY,KAAK,SACLH,UAAU,eACVI,YAAY,yBAEblB,GAAe,kDAAqBA,KACpCJ,GAAkBF,GACjB,wBAAQyB,QAASV,EAASK,UAAU,aAApC,6BC7DKM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlB,MAAK,YAAkD,IAA/CmB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.3947d11f.chunk.js","sourcesContent":["export default Promise.resolve({\r\n  amount: 1,\r\n  base: \"EUR\",\r\n  date: \"2021-10-05\",\r\n  rates: {\r\n    AUD: 1.5937,\r\n    BGN: 1.9558,\r\n    BRL: 6.3106,\r\n    CAD: 1.4612,\r\n    CHF: 1.0752,\r\n    CNY: 7.4805,\r\n    CZK: 25.308,\r\n    DKK: 7.4379,\r\n    GBP: 0.85173,\r\n    HKD: 9.0324,\r\n    HRK: 7.505,\r\n    HUF: 356.9,\r\n    IDR: 16507,\r\n    ILS: 3.7477,\r\n    INR: 86.49,\r\n    ISK: 148,\r\n    JPY: 128.99,\r\n    KRW: 1376.12,\r\n    MXN: 23.79,\r\n    MYR: 4.8482,\r\n    NOK: 9.9155,\r\n    NZD: 1.665,\r\n    PHP: 58.893,\r\n    PLN: 4.5998,\r\n    RON: 4.9477,\r\n    RUB: 84.15,\r\n    SEK: 10.131,\r\n    SGD: 1.5743,\r\n    THB: 39.203,\r\n    TRY: 10.2707,\r\n    USD: 1.1602,\r\n    ZAR: 17.3792,\r\n  },\r\n});\r\n","import \"./App.css\";\nimport Dinero from \"dinero.js\";\nimport Rates from \"./data/rates\";\nimport \"./App.css\";\nimport { useEffect, useState } from \"react\";\n\nDinero.globalExchangeRatesApi = {\n  currency: \"EUR\",\n  endpoint: Rates,\n};\n\nconst CurrencySelector = ({ rates, title, onChange }) => {\n  return (\n    <div>\n      <p>{title}</p>\n      <select onChange={onChange}>\n        {rates.map((rate, index) => (\n          <option key={index}>{rate} </option>\n        ))}\n      </select>\n    </div>\n  );\n};\n\nfunction App() {\n  const [rates, setRates] = useState([]);\n  const [originCurrency, setoriginCurrency] = useState(\"\");\n  const [targetCurrency, settargetCurrency] = useState(\"\");\n  const [originalAmount, setoriginalAmount] = useState([]);\n  const [finalAmount, setfinalAmount] = useState();\n\n  useEffect(() => {\n    let data;\n    Rates.then((value) => {\n      data = value;\n      let ratesArray = Object.keys(data.rates);\n      setRates(ratesArray);\n    });\n  }, []);\n\n  const convert = async () => {\n    let amount = Dinero({\n      amount: parseInt(originalAmount) * 100,\n      currency: originCurrency,\n    });\n    let result = await amount.convert(targetCurrency);\n    setfinalAmount(result.toFormat());\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"card\">\n        <h1>conversion entre monedas</h1>\n        <div className=\"flex-container\">\n          <CurrencySelector\n            onChange={(e) => setoriginCurrency(e.target.value)}\n            title={`Origen: ${originCurrency}`}\n            rates={rates}\n          />\n          <CurrencySelector\n            onChange={(e) => settargetCurrency(e.target.value)}\n            title={`Destino: ${targetCurrency}`}\n            rates={rates}\n          />\n        </div>\n        <input\n          onChange={(e) => setoriginalAmount(e.target.value)}\n          type=\"number\"\n          className=\"form-control\"\n          placeholder=\"cantidad en centavos\"\n        />\n        {finalAmount && <p>El resultado es: {finalAmount}</p>}\n        {targetCurrency && originCurrency && (\n          <button onClick={convert} className=\"app-button\">\n            Convertir\n          </button>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}